{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "groupomania-api",
    "description": "",
    "license": {
      "name": "ISC"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Everything about the authenthication"
    },
    {
      "name": "posts",
      "description": "Everything about the posts"
    }
  ],
  "servers": [
    {
      "url": "https://localhost:3000"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Connexion of a user",
        "description": "Check of the user identification informations, return the id of the user from the database and 2 signed JSON web tokens (an access token, and a refresh token). If a refresh token is in the authorization headers of the request, it is revoked from the database. The number of (failed) attempts to connect for a user is limited (in the time as well).\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "data needed for log in a user",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "e-mail adress of the user [unique]"
                  },
                  "password": {
                    "type": "string",
                    "description": "hashed user password"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "current refresh token of the user"
                  }
                },
                "required": [
                  "email",
                  "password"
                ],
                "example": {
                  "email": "my-email-adress@email.com",
                  "password": "MY-p@ssw0rd2"
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-credentials"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error object containing a message and optionally a number of seconds to wait before a retry",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/errorObject"
                    },
                    "reftyAfter": {
                      "type": "number",
                      "description": "number of seconds to wait before retrying the login"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "example": {
                    "error": {
                      "name": "Error",
                      "message": "Incorrect password"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error object containing a message and a number of seconds to wait before a retry",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/errorObject"
                    },
                    "reftyAfter": {
                      "type": "number",
                      "description": "number of seconds to wait before retrying the login"
                    }
                  },
                  "example": {
                    "error": {
                      "name": "Error",
                      "message": "Too Many Requests"
                    },
                    "reftyAfter": 60
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Disconnexion of a user to revoke the current refresh token",
        "description": "Checks the refresh token payload and revokes its ID in the database, so other users with the same refresh token ID won't be able to get access tokens from this refresh token ID.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "signed refresh token (containing the user ID and the refresh token ID stored in the database)"
                  }
                }
              },
              "example": {
                "refreshToken": "..."
              }
            }
          }
        },
        "security": [],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Retrieve a new access token from a refresh token",
        "description": "Checks the refresh token validity and its validity in the database, and sends back a new access token and a new refresh token if all is fine. Else, revokes the refresh token ID in the database, so other users with the same refresh token ID won't be able to get access tokens from this refresh token ID.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "signed refresh token (containing the user ID and the refresh token ID stored in the database)"
                  }
                }
              },
              "example": {
                "refreshToken": "..."
              }
            }
          }
        },
        "security": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-credentials"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Creation of a new user",
        "description": "Hash the user password and add the user to the database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "data needed for a user creation",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "e-mail adress of the user [unique]"
                  },
                  "password": {
                    "type": "string",
                    "description": "hashed user password"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "first name of the user"
                  },
                  "surName": {
                    "type": "string",
                    "description": "surname of the user"
                  },
                  "pseudo": {
                    "type": "string",
                    "description": "pseudonym of the user"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "surName"
                ],
                "example": {
                  "email": "my-email-adress@email.com",
                  "password": "MY-p@ssw0rd2",
                  "firstName": "Peter",
                  "surName": "Smith"
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "User creation message"
                },
                "example": "User created"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/posts": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Find all posts",
        "description": "Returns an array of some of the posts in the database, with a descending order (more recent first). Each post also includes the author, likes, dislikes and some comments (with a descending order).\n",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of posts to retrieve.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "The date before which the posts must be retrieved.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-10-12T09:43:15.103Z"
            }
          },
          {
            "in": "query",
            "name": "comments-limit",
            "description": "The maximum number of comments to retrieve for each post.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/post"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Creation of a new post",
        "description": "Creates a post with a text and with or without an image (and with empty likes and dislikes arrays). If an image is uploaded, it is captured, and the imageUrl of the post is initialized. If no file is submitted, the informations of the post are in the root of the request body. If a file is submitted, the post (string) is in req.body.post The initial request body is empty ; multer returns a string for the request body with the data submitted with the file.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "data to use to create a post without image",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Content (text) of the post"
                  }
                },
                "required": [
                  "text"
                ],
                "example": {
                  "text": "This is a post text"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post": {
                    "$ref": "#/components/schemas/post-form-with-image"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "image to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Finds a post by ID",
        "description": "Returns the post with the given id (in path parameter). The post also includes the author, likes, dislikes and some comments (with a descending order).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          },
          {
            "in": "query",
            "name": "comments-limit",
            "description": "The maximum number of comments to retrieve for the post.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "posts"
        ],
        "summary": "Modification of a post",
        "description": "Update the post with the id submitted. If no file is submitted, the updated text of the post is in the root of the request body. If no file is submitted, the root of the request body also contains a removeImage boolean property.  If a file is submitted, the updated post (string) is in req.body.post. If a file is uploaded, it is captured, and the imageUrl of the post is updated. The initial request body is empty ; multer returns a string for the request body with the data submitted with the file.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "data to use to modify the post without image",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Content (text) of the post"
                  },
                  "removeImage": {
                    "type": "boolean",
                    "description": "If the image should be removed from the post"
                  }
                },
                "required": [
                  "text"
                ],
                "example": {
                  "text": "This is a post text"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post": {
                    "$ref": "#/components/schemas/post-form-with-image"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "image to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "posts"
        ],
        "summary": "Deletion of a post",
        "description": "Delete the post with the given id (and its comments)",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{id}/comments": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Find comments for a post",
        "description": "Returns an array of some of the comments of the post specified in the path parameter, with a descending order (more recent first). Each comment also includes the author.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of comments to retrieve.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "The date before which the comments must be retrieved.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-10-12T09:43:15.103Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Creation of a new comment to an existing post",
        "description": "Creates a comment (text) relative to a post (with the comment's authors' ID)\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text content of the comment"
                  }
                }
              },
              "example": {
                "text": "This is a comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{id}/like": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Sets the like status of a post for a user",
        "description": "Define the \"like\" status of a given user for a post If like = 1, the user likes the post. If like = 0, the user cancels its like or dislike (neutral). If like = -1, the user dislikes the post. The ID of the user is added (and/or removed) to the right array. A user can only have one (and only one) value for each post.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/postIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "like": {
                    "type": "number",
                    "description": "new like status of the post for the user (-1 dislike / 0 neutral / 1 like)",
                    "minimum": -1,
                    "maximum": 1,
                    "enum": [
                      -1,
                      0,
                      1
                    ]
                  }
                }
              },
              "example": {
                "like": 1
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "postIdParam": {
        "description": "post ID",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "description": "ID of the post"
        }
      }
    },
    "schemas": {
      "errorMessage": {
        "type": "string",
        "maxLength": 256,
        "description": "A text message describing an error",
        "example": "Error during the request processing"
      },
      "errorObject": {
        "type": "object",
        "description": "An error defined by a name and a message",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the error",
            "example": "Error"
          },
          "message": {
            "type": "string",
            "maxLength": 256,
            "description": "A text message describing the error",
            "example": "Error during the request processing"
          }
        },
        "example": {
          "name": "Error",
          "message": "Error during the request processing"
        }
      },
      "error": {
        "type": "object",
        "description": "An error defined by a name and a message",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/errorObject"
          }
        },
        "example": {
          "error": {
            "name": "Error",
            "message": "Error during the request processing"
          }
        }
      },
      "user-credentials": {
        "type": "object",
        "description": "data relative to credentials sent back to a user after login or refresh (object structure -> user-credentials schema)",
        "properties": {
          "user": {
            "type": "object",
            "description": "User data (from the database)",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the user that created the post"
              },
              "email": {
                "type": "string",
                "description": "E-mail of the user that created the post"
              },
              "firstName": {
                "type": "string",
                "description": "First name of the user that created the post"
              },
              "surName": {
                "type": "string",
                "description": "Surname of the user that created the post"
              },
              "pseudo": {
                "type": "string",
                "description": "Pseudonym of the user that created the post"
              },
              "role": {
                "type": "string",
                "description": "Role (user or admin) of the user that created the post"
              }
            },
            "required": [
              "id",
              "email",
              "firstName",
              "surName",
              "role"
            ]
          },
          "accessToken": {
            "type": "string",
            "description": "signed access token (containing the user ID)"
          },
          "refreshToken": {
            "type": "string",
            "description": "signed refresh token (containing the user ID and the refresh token ID stored in the database)"
          }
        },
        "example": {
          "userId": {
            "id": "e5268c386c9b17c39bd6a17d",
            "email": "my-email-adress@email.com",
            "firstName": "Peter",
            "surName": "Smith",
            "pseudo": "Pete",
            "role": "User"
          },
          "accessToken": "string",
          "refreshToken": "string"
        }
      },
      "post": {
        "type": "object",
        "description": "data relative to a post (object structure -> post schema)",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the post"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "description": "Date of creation of the post"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "description": "Date of update of the post"
          },
          "text": {
            "type": "string",
            "description": "Content (text) of the post"
          },
          "imageUrl": {
            "type": "string",
            "description": "Content (image URL) of the post"
          },
          "imageAlt": {
            "type": "string",
            "description": "Content (image URL) of the post"
          },
          "authorId": {
            "type": "string",
            "description": "ID of the user that created the post"
          },
          "author": {
            "type": "object",
            "description": "User that created the post",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "First name of the user that created the post"
              },
              "surName": {
                "type": "string",
                "description": "Surname of the user that created the post"
              },
              "pseudo": {
                "type": "string",
                "description": "Pseudonym of the user that created the post"
              }
            },
            "required": [
              "firstName",
              "surName"
            ]
          },
          "likes": {
            "type": "array",
            "description": "Array of users (user IDs) that likes the post",
            "items": {
              "type": "object",
              "description": "User that created the post",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of a user that likes the post"
                }
              }
            },
            "minItems": 0
          },
          "dislikes": {
            "type": "array",
            "description": "Array of users (user IDs) that dislikes the post",
            "items": {
              "type": "object",
              "description": "User that created the post",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of a user that dislikes the post"
                }
              }
            },
            "minItems": 0
          },
          "comments": {
            "type": "array",
            "description": "Array of comments of the post",
            "items": {
              "$ref": "#/components/schemas/comment"
            },
            "minItems": 0
          }
        },
        "example": {
          "id": "cl6dl8yq10022b4muffz9isxl",
          "createdAt": "2022-08-03T12:31:30.505Z",
          "updatedAt": "2022-08-03T12:31:30.505Z",
          "text": "This is a post text",
          "imageUrl": "http://localhost:3000/images/Post1_image_20220701_162713.jpg",
          "imageAlt": "This is the description of the image",
          "authorId": "e5268c386c9b17c39bd6a17d",
          "likes": [
            {
              "id": "c386c9b17c39be5268d6a17d"
            },
            {
              "id": "9b17c39be5268dc386c6a17d"
            }
          ],
          "dislikes": [
            {
              "id": "be5268dc386c6a9b17c3917d"
            },
            {
              "id": "a9b17c3917dbe5268dc386c6"
            }
          ],
          "comments": [
            {
              "id": "cl977p9mb000at2vkmudnbxcp",
              "createdAt": "2022-08-03T12:31:30.505Z",
              "text": "This is a comment",
              "authorId": "e5268c386c9b17c39bd6a17d",
              "postId": "cl6dl8yq10022b4muffz9isxl"
            }
          ]
        }
      },
      "post-form-with-image": {
        "type": "object",
        "description": "data to use to create the post with image (object structure -> post-form-with-image schema)",
        "properties": {
          "text": {
            "type": "string",
            "description": "Content (text) of the post"
          },
          "imageAlt": {
            "type": "string",
            "description": "Description (alternative text) of the image (required if an image is provided)"
          }
        },
        "example": {
          "text": "This is a post text",
          "imageAlt": "This is the description of the image"
        }
      },
      "comment": {
        "type": "object",
        "description": "data relative to a comment (object structure -> comment schema)",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date of the comment"
          },
          "text": {
            "type": "string",
            "description": "Text of the comment"
          },
          "authorId": {
            "type": "string",
            "description": "ID of the author of the comment"
          },
          "postId": {
            "type": "string",
            "description": "ID of the post of the comment"
          }
        },
        "example": {
          "id": "cl977p9mb000at2vkmudnbxcp",
          "createdAt": "2022-08-03T12:31:30.505Z",
          "text": "This is a comment",
          "authorId": "e5268c386c9b17c39bd6a17d",
          "postId": "cl6dl8yq10022b4muffz9isxl"
        }
      }
    }
  }
}
